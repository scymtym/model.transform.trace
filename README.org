#+TITLE:       model.transform.trace README
#+AUTHOR:      Jan Moringen
#+EMAIL:       jmoringe@techfak.uni-bielefeld.de
#+KEYWORDS:    common lisp, model, transformation
#+LANGUAGE:    en

#+SEQ_TODO: TODO STARTED | DONE
#+OPTIONS: num:nil toc:nil

* STARTED Introduction

  The ~model.transform.trace~ library provides facilities for
  recording and querying traces of model transformations such parsing
  textual input into an AST or transformations of intermediate
  representations in a compiler.

* STARTED Glossary

  Here are some frequently used (in this text as well as the library
  itself) terms:

  + <<glossary:trace>> trace :: An object recording the fact that a
       [[glossary:transformation][transformation]] produced one or more [[glossary:target][target]] objects from one or
       more [[glossary:source][source]] objects.

       Technically, a trace is a triple of one [[glossary:transformation][transformation]], a set
       of [[glossary:source][source]] objects and a set of [[glossary:target][target]] objects.

       Example: Parsing, as a transformation, may produce an AST node
       from a range of input text.

  + <<glossary:source>> source :: An object from which a
       [[glossary:transformation][transformation]] produced one or more [[glossary:target][target]] objects.

  + <<glossary:root>> root :: A [[glossary:source][source]] object that is not a [[glossary:target][target]]
       object in any [[glossary:trace][trace]].

  + <<glossary:target>> target :: An object produced by a
       [[glossary:transformation][transformation]] from one or more [[glossary:source][sources]].

  + <<glossary:leaf>> leaf :: A [[glossary:target][target]]

  + <<glossary:transformation>> transformation :: An arbitrary
       client-supplied object representing a transformation.

  + <<glossary:tracer>> tracer :: A collection of [[glossary:trace][traces]].

* STARTED Tutorial

** STARTED Tracer, Transforms and Recording Traces

   Before [[glossary:trace][traces]] can be recorded, the following context has to be
   established:

   1. A current [[glossary:tracer][tracer]]

   2. A current [[glossary:transformation][transformation]]

   #+BEGIN_SRC lisp :exports both
     (let ((tracer (model.transform.trace:make-tracer)))
       (list
        (model.transform.trace:with-tracer (tracer)
          (model.transform.trace:with-transform ('my-transform)
            (model.transform.trace:recording-transform (() 1 2)
              (+ 1 2))))
        tracer))
   #+END_SRC

   #+RESULTS:
   : (3 #<TRACER (1) {1009F8CBD3}>)

* STARTED Reference

  #+BEGIN_SRC lisp :results none :exports none :session "doc"
    #.(progn
        #1=(ql:quickload '(:model.transform.trace :alexandria :split-sequence))
        '#1#)
    (defun doc (symbol kind)
      (let* ((lambda-list (sb-introspect:function-lambda-list symbol))
             (string      (documentation symbol kind))
             (lines       (split-sequence:split-sequence #\Newline string))
             (trimmed     (mapcar (alexandria:curry #'string-left-trim '(#\Space)) lines)))
        (format nil "~(~A~) ~<~{~A~^ ~}~:@>~2%~{~A~^~%~}"
                symbol (list lambda-list) trimmed)))
  #+END_SRC

** STARTED The Tracer Protocol

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:map-sources-for-transform 'function)
   #+END_SRC

   #+RESULTS:
   : map-sources-for-transform TRACER FUNCTION TRANSFORM
   :
   : Call FUNCTION for each source object recorded for TRANSFORM in TRACER.
   :
   : The lambda list of FUNCTION has to be compatible with
   :
   : (source)
   :
   : where SOURCE is the source object.

** STARTED Trace Recording Macros

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:with-tracer 'function)
   #+END_SRC

   #+RESULTS:
   : with-tracer (TRACER) &BODY BODY
   :
   : Execute BODY with the current tracer bound to TRACER.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:with-transform 'function)
   #+END_SRC

   #+RESULTS:
   : with-transform (TRANSFORM) &BODY BODY
   :
   : Execute BODY with the current transform bound to TRANSFORM.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:with-current-sources 'function)
   #+END_SRC

   #+RESULTS:
   : with-current-sources (&REST SOURCES) &BODY BODY
   :
   : Evaluate BODY with the current sources bound to SOURCES.
   :
   : The main purpose binding of the current sources is error
   : reporting.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:with-current-sources* 'function)
   #+END_SRC

   #+RESULTS:
   : with-current-sources* (&REST SOURCES) &BODY BODY
   :
   : Like `with-current-sources' but the last element of SOURCES is a list.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:recording-transform 'function)
   #+END_SRC

   #+RESULTS:
   : recording-transform ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
   :
   : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.
   :
   : Also bind the current sources to SOURCES during the evaluation of BODY.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:recording-transform* 'function)
   #+END_SRC

   #+RESULTS:
   : recording-transform* ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
   :
   : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.
   :
   : Also bind the current sources to SOURCES during the evaluation of BODY.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:ensured-transform 'function)
   #+END_SRC

   #+RESULTS:
   : ensured-transform ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
   :
   : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.
   :
   : Also bind the current sources to SOURCES during the evaluation of BODY.

   #+BEGIN_SRC lisp :results value :exports results :session "doc"
     (doc 'model.transform.trace:ensured-transform* 'function)
   #+END_SRC

   #+RESULTS:
   : ensured-transform* ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
   :
   : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.
   :
   : Also bind the current sources to SOURCES during the evaluation of BODY.
