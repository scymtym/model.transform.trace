#+TITLE:       model.transform.trace README
#+AUTHOR:      Jan Moringen
#+EMAIL:       jmoringe@techfak.uni-bielefeld.de
#+DESCRIPTION:
#+KEYWORDS:    common lisp,
#+LANGUAGE:    en

* STARTED Introduction

  The ~model.transform.trace~ system

* TODO Tutorial

** STARTED Tracer, Traces and Transforms

   #+BEGIN_SRC lisp :exports both
     (let ((tracer (model.transform.trace:make-tracer)))
       (list
        (model.transform.trace:with-tracer (tracer)
          (model.transform.trace:with-transform ('my-transform)
            (model.transform.trace:recording-transform (() 1 2)
              (+ 1 2))))
        tracer))

   #+END_SRC

   #+RESULTS:
   : (3 #<TRACER (1) {1009F8CBD3}>)

* STARTED Reference

  #+begin_src lisp :results none :exports none :session "doc"
    #.(progn
        #1=(ql:quickload '(:model.transform.trace :alexandria :split-sequence))
        '#1#)
    (defun doc (symbol kind)
      (let* ((lambda-list (sb-introspect:function-lambda-list symbol))
             (string      (documentation symbol kind))
             (lines       (split-sequence:split-sequence #\Newline string))
             (trimmed     (mapcar (alexandria:curry #'string-left-trim '(#\Space)) lines)))
        (format nil "~(~A~) ~<~{~A~^ ~}~:@>~2%~{~A~^~%~}"
                symbol (list lambda-list) trimmed)))
  #+end_src

  #+BEGIN_SRC lisp :results value :exports results :session "doc"
    (doc 'model.transform.trace:with-tracer 'function)
  #+END_SRC

  #+RESULTS:
  : with-tracer (TRACER) &BODY BODY
  :
  : Execute BODY with the current tracer bound to TRACER.

  #+BEGIN_SRC lisp :results value :exports results :session "doc"
    (doc 'model.transform.trace:with-transform 'function)
  #+END_SRC

  #+RESULTS:
  : with-transform (TRANSFORM) &BODY BODY
  :
  : Execute BODY with the current transform bound to TRANSFORM.

  #+BEGIN_SRC lisp :results value :exports results :session "doc"
    (doc 'model.transform.trace:recording-transform 'function)
  #+END_SRC

  #+RESULTS:
  : recording-transform ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
  :
  : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.

  #+BEGIN_SRC lisp :results value :exports results :session "doc"
  (doc 'model.transform.trace:recording-transform* 'function)
  #+END_SRC

  #+RESULTS:
  : recording-transform* ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
  :
  : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.

  #+BEGIN_SRC lisp :results value :exports results :session "doc"
    (doc 'model.transform.trace:ensured-transform 'function)
  #+END_SRC

  #+RESULTS:
  : ensured-transform ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
  :
  : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.

  #+BEGIN_SRC lisp :results value :exports results :session "doc"
    (doc 'model.transform.trace:ensured-transform* 'function)
  #+END_SRC

  #+RESULTS:
  : ensured-transform* ((&OPTIONAL (TRANSFORM) (TRACER)) &REST SOURCES) &BODY BODY
  :
  : Add a trace for TRANSFORM, SOURCES and the result of BODY to TRACER.

* Settings                                                         :noexport:

#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+SEQ_TODO: TODO STARTED | DONE
